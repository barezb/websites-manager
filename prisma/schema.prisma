datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String    @unique
  password      String
  email         String    @unique @default("")
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  websites      Website[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Category {
  id       String    @id @default(cuid())
  name     String
  color    String?
  websites Website[]
}

model Client {
  id        String    @id @default(cuid())
  name      String
  email     String?
  phone     String?
  address   String?
  websites  Website[]
  payments  Payment[]
  notes     String?
  createdAt DateTime  @default(now())
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Website {
  id              String        @id @default(cuid())
  name            String
  url             String
  technologies    String[]
  hostProvider    String?
  domainRenewal   DateTime?
  hostRenewal     DateTime?
  status          WebsiteStatus @default(UNKNOWN)
  category        Category?     @relation(fields: [categoryId], references: [id])
  categoryId      String?
  client          Client?       @relation(fields: [clientId], references: [id])
  clientId        String?
  loginInfo       Json?
  lastHealthCheck DateTime?
  notes           String?
  userId          String
  createdAt       DateTime      @default(now())

  User User @relation(fields: [userId], references: [id])
}

model Payment {
  id            String        @id @default(cuid())
  client        Client        @relation(fields: [clientId], references: [id])
  clientId      String
  amount        Float
  date          DateTime
  status        PaymentStatus @default(PENDING)
  invoiceNumber String?
  description   String?
  createdAt     DateTime      @default(now())
}

enum WebsiteStatus {
  RUNNING
  PROBLEMATIC
  STOPPED
  UNKNOWN
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}
